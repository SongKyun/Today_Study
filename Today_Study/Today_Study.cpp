/*
1. 언리얼 엔진에서 Tick() 함수는 언제, 어떻게 호출되며, 게임 성능에 어떤 영향을 미치나?
Tick() 함수는 언리얼 엔진의 게임 루프에서 매 프레임마다 호출되는 함수로, 액터나 컴포넌트가 매 프레임마다 특정 동작을 수행하도록 할 때 사용됩니다.

Tick() 호출 시점은 World에서 등록된 액터들을 대상으로 엔진의 프레임 루프(게임 스레드) 내부에서 호출됩니다.

프레임당 한 번씩 호출되므로, 많은 액터가 Tick()을 사용하거나 복잡한 연산이 발생하면 프레임 드랍 등의 성능 저하가 발생할 수 있습니다.

때문에 불필요한 Tick을 끄거나, 빈도 조절 하거나, FTimer, Delegate, Event 기반으로 설계를 대체하는 것이 성능에 더 효율적입니다.

2. 아래 코드에서 복사 생성자, 이동 생성자, 대입 연산자 중 어떤 것이 호출될지 설명해보세요.
std::vector<MyClass> vec;
vec.push_back(MyClass());
MyClass()는 rvalue이고, push_back()은 이를 인자로 받아 이동 생성자를 호출하며, 컴파일러 최적화(RVO)에 따라 생성자 호출이 생략될 수도 있다.

이동 생성자가 없으면 컴파일러는 복사 생성자를 대신 사용한다.

3. 프로세스와 스레드의 차이를 설명하고, 게임 클라이언트에서 멀티스레드를 사용하는 이유는 무엇인가요?
스레드는 주소와 자원을 공유하는 실행 단위이고 오류 시 전체에 영향이 가며, 프로세스는 독립된 프로그램 단위여서 다른 프로세스에 영향 없습니다.

게임은 많은 작업을 병렬로 처리해야 하므로 여러 스레드를 가지고 실행됩니다.

예를 들어 렌더링, 게임, 오디오 등의 스레드를 사용합니다.

4. 레스터라이제이션 기반 렌더링 파이프라인에서 'Depth Test'는 어떤 단계에서 수행되고, 왜 필요한가요?
레스터라이제이션 이후, 픽셀 셰이딩 직전 또는 직후에 수행됩니다.

간략 순서 :

1. Vertex Shader → 정점 변환
2. Primitive Assembly → 삼각형 구성
3. Rasterization → 픽셀로 분할
4. Fragment(Pixel) Shader 실행
5. Depth Test (Z-buffer 비교)
6. 통과 시 → Framebuffer에 최종 색상 출력

필요한 이유는 3D 공간에서는 여러 오브젝트가 겹쳐 보일 수 있는데 화면상에서 어떤 픽셀이 앞에 있는지 판단해야 하므로

Depth Buffer를 이용하여 현재 픽셀 Z값과 이미 렌더링된 Z-buffer 값을 비교해

현재 픽셀이 더 가까우면 갱신, 아니면 폐기

요약

Depth Test는 레스터라이제이션 이후 각 픽셀의 Z값을 비교하여, 더 앞에 있는 픽셀만 화면에 출력하는 과정으로, 3D 장면의 정확한 가시성을 보장하는 기술이다.